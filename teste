#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

typedef struct {
    int id;
    long size;
    char timestamp[20];
} Image;

// Funções de ordenação
void quicksort(Image* arr, int low, int high);
void heapsort(Image* arr, int n);
void mergesort(Image* arr, int l, int r);

// Funções auxiliares
int partition(Image* arr, int low, int high);
void heapify(Image* arr, int n, int i);
void merge(Image* arr, int l, int m, int r);
void swap(Image* a, Image* b);

// Funções de geração e leitura de dados
void generate_random_data(Image* images, int count);
int read_external_data(const char* filename, Image* images, int max_images);

// Função de medição de tempo
double measure_time(void (sort_function)(Image, int), Image* arr, int n);

// Função principal
int main() {
    const int SIZES[] = {1000, 10000, 100000, 1000000};
    const int NUM_SIZES = sizeof(SIZES) / sizeof(SIZES[0]);
    
    for (int i = 0; i < NUM_SIZES; i++) {
        int size = SIZES[i];
        Image* data = malloc(size * sizeof(Image));
        
        // Teste com dados aleatórios
        generate_random_data(data, size);
        printf("Tamanho do array: %d\n", size);
        printf("Quicksort: %.6f segundos\n", measure_time(quicksort, data, size));
        printf("Heapsort: %.6f segundos\n", measure_time(heapsort, data, size));
        printf("Mergesort: %.6f segundos\n", measure_time(mergesort, data, size));
        printf("\n");
        
        free(data);
    }
    
    return 0;
}

// Implementação do Quicksort
void quicksort(Image* arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

int partition(Image* arr, int low, int high) {
    Image pivot = arr[high];
    int i = (low - 1);
    
    for (int j = low; j <= high - 1; j++) {
        if (arr[j].size < pivot.size) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

// Implementação do Heapsort
void heapsort(Image* arr, int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    
    for (int i = n - 1; i > 0; i--) {
        swap(&arr[0], &arr[i]);
        heapify(arr, i, 0);
    }
}

void heapify(Image* arr, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    
    if (left < n && arr[left].size > arr[largest].size)
        largest = left;
    
    if (right < n && arr[right].size > arr[largest].size)
        largest = right;
    
    if (largest != i) {
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}

// Implementação do Mergesort
void mergesort(Image* arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergesort(arr, l, m);
        mergesort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void merge(Image* arr, int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    
    Image L[n1], R[n2];
    
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    
    i = 0;
    j = 0;
    k = l;
    
    while (i < n1 && j < n2) {
        if (L[i].size <= R[j].size) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Função auxiliar para trocar elementos
void swap(Image* a, Image* b) {
    Image t = *a;
    *a = *b;
    *b = t;
}

// Geração de dados aleatórios
void generate_random_data(Image* images, int count) {
    srand(time(NULL));
    for (int i = 0; i < count; i++) {
        images[i].id = i + 1;
        images[i].size = rand() % 1000000 + 1;  // Tamanho entre 1 e 1000000 bytes
        sprintf(images[i].timestamp, "%d-%02d-%02d", 
                2024, rand() % 12 + 1, rand() % 28 + 1);
    }
}

// Leitura de dados externos
int read_external_data(const char* filename, Image* images, int max_images) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        perror("Erro ao abrir o arquivo");
        return 0;
    }
    
    int count = 0;
    while (count < max_images && fscanf(file, "%d,%ld,%s", 
           &images[count].id, &images[count].size, images[count].timestamp) == 3) {
        count++;
    }
    
    fclose(file);
    return count;
}

// Medição de tempo
double measure_time(void (sort_function)(Image, int), Image* arr, int n) {
    clock_t start, end;
    double cpu_time_used;
    
    start = clock();
    sort_function(arr, n);
    end = clock();
    
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    return cpu_time_used;
}
